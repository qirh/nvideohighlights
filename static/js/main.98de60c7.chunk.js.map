{"version":3,"sources":["SearchBar.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleInputChange","e","setState","value","target","searchTermChange","state","bind","placeholder","this","onChange","style","width","height","Component","Styles","styled","div","Table","columns","data","useTable","initialState","pageIndex","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageSize","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","className","marginTop","onClick","disabled","length","type","defaultValue","Number","key","DataTable","Header","accessor","rows","App","searchTerm","fetch","then","res","json","result","_","forEach","competitionName","competition","name","side1Name","side1","side2Name","side2","filteredRows","filter","item","toLowerCase","includes","title","url","playing","margin","marginBottom","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98de60c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass SearchBar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange = (e) => {\n    this.setState({value: e.target.value});\n    this.props.searchTermChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          <input\n            placeholder=\"Search\"\n            value={this.state.value}\n            onChange={this.handleInputChange}\n            style={{ width: \"500px\", height: \"20px\" }}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport { useTable, useSortBy, usePagination } from 'react-table'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n    margin: 0 auto;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({ columns, data }) {\n  // const {\n  //   getTableProps,\n  //   getTableBodyProps,\n  //   headerGroups,\n  //   rows,\n  //   prepareRow,\n  // } = useTable(\n  //   {\n  //     columns,\n  //     data,\n  //   },\n  //   useSortBy,\n  //   usePagination,\n  // )\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n    },\n    useSortBy,\n    usePagination\n  )\n\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(\n            (row, i) => {\n              prepareRow(row)\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map(cell => {\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  })}\n                </tr>\n              )\n            }\n          )}\n        </tbody>\n      </table>\n\n      <div className=\"pagination\" style={{ marginTop: '30px' }}>\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nclass DataTable extends Component {\n  render() {\n    const columns = [\n      {\n        Header: 'Title',\n        accessor: 'title',\n      },\n      {\n        Header: 'Team1',\n        accessor: 'side1Name',\n      },\n      {\n        Header: 'Team2',\n        accessor: 'side2Name',\n      },\n      {\n        Header: 'League',\n        accessor: 'competitionName',\n      },\n    ]\n\n    return (\n      <Styles>\n        <Table columns={columns} data={this.props.rows} />\n      </Styles>\n    )\n  }\n}\n\nexport default DataTable\n","import React, { Component } from 'react'\n\nimport _ from 'lodash';\nimport './App.css';\n\nimport SearchBar from './SearchBar.js';\nimport DataTable from './Table.js'\nimport ReactPlayer from 'react-player'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      searchTerm: '',\n    };\n    this.searchTermChange = this.searchTermChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.scorebat.com/video-api/v1\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          _.forEach(result, (value, key) => {\n            value.competitionName = value.competition.name\n            value.side1Name = value.side1.name\n            value.side2Name = value.side2.name\n          });\n\n          this.setState({\n            rows: result\n          });\n        }\n      )\n  }\n\n  searchTermChange = (value) => {\n    this.setState({\n      searchTerm: value,\n    });\n  }\n\n  render() {\n    const { rows, searchTerm } = this.state;\n    let filteredRows = [];\n\n    if(searchTerm) {\n      filteredRows = _.filter(rows, (item) => {\n        return item.competitionName.toLowerCase().includes(searchTerm.toLowerCase())\n          || item.side1Name.toLowerCase().includes(searchTerm.toLowerCase())\n          || item.side2Name.toLowerCase().includes(searchTerm.toLowerCase())\n          || item.title.toLowerCase().includes(searchTerm.toLowerCase());\n      });\n    } else {\n      filteredRows = rows;\n    }\n\n    return (\n      <div className=\"App\">\n        <ReactPlayer url='https://youtu.be/fUpsta0bHEE' playing  style={{ margin: '0 auto', marginBottom: '20px'}} />\n        <SearchBar searchTermChange={this.searchTermChange} />\n        <DataTable rows={filteredRows} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}